{"ast":null,"code":"var _jsxFileName = \"/Users/peterstephens/Documents/projects/erdos_number/erdos_display/src/components/BarGraph.js\";\nimport React, { Component } from 'react';\nimport * as d3 from 'd3';\nconst w = 1283;\nconst h = 404;\n\nclass BarGraph extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.componentDidMount = () => {\n      let nodes = this.props.data.nodes;\n      console.log(nodes);\n      const data = [2, 4, 2, 6, 8];\n      this.drawBarChart(data, nodes);\n    };\n\n    this.drawBarChart = (data, nodes) => {\n      //const width = document.getElementById(\"force\").innerWidth;\n      //const height = document.getElementById(\"force\").innerHeight;\n      const width = w;\n      const height = h;\n      const scale = 5;\n      const svgCanvas = d3.select(this.refs.canvas).append('svg').attr('width', width).attr('height', height).style('border', '1px solid #aaa');\n\n      for (i = 0; i < nodes.length; i++) {\n        svgCanvas.select('rect').data(nodes[i].pubs).enter().append('rect').attr('width', 5).attr('height', datapoint => datapoint * scale).attr('fill', '#0099ff').attr('x', (datapoint, iteration) => iteration * 45).attr('y', datapoint => height - datapoint * scale);\n        svgCanvas.select('text').data(nodes[i].name).enter().append('text').attr('x', (dataPoint, i) => i * 45 + 10).attr('y', (dataPoint, i) => height - dataPoint * scale - 10).text(dataPoint => dataPoint);\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      ref: \"canvas\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 7\n      }\n    });\n  }\n\n}\n\nexport default BarGraph;","map":{"version":3,"sources":["/Users/peterstephens/Documents/projects/erdos_number/erdos_display/src/components/BarGraph.js"],"names":["React","Component","d3","w","h","BarGraph","componentDidMount","nodes","props","data","console","log","drawBarChart","width","height","scale","svgCanvas","select","refs","canvas","append","attr","style","i","length","pubs","enter","datapoint","iteration","name","dataPoint","text","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AAEA,MAAMC,CAAC,GAAG,IAAV;AACA,MAAMC,CAAC,GAAG,GAAV;;AAEA,MAAMC,QAAN,SAAuBJ,SAAvB,CAAiC;AAAA;AAAA;;AAAA,SAE7BK,iBAF6B,GAET,MAAM;AACxB,UAAIC,KAAK,GAAG,KAAKC,KAAL,CAAWC,IAAX,CAAgBF,KAA5B;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ;AACA,YAAME,IAAI,GAAG,CAAE,CAAF,EAAK,CAAL,EAAQ,CAAR,EAAW,CAAX,EAAc,CAAd,CAAb;AACA,WAAKG,YAAL,CAAkBH,IAAlB,EAAwBF,KAAxB;AACD,KAP4B;;AAAA,SAS7BK,YAT6B,GASd,CAACH,IAAD,EAAOF,KAAP,KAAkB;AAE/B;AACA;AACA,YAAMM,KAAK,GAAGV,CAAd;AACA,YAAMW,MAAM,GAAGV,CAAf;AACA,YAAMW,KAAK,GAAG,CAAd;AACA,YAAMC,SAAS,GAAGd,EAAE,CAACe,MAAH,CAAU,KAAKC,IAAL,CAAUC,MAApB,EACGC,MADH,CACU,KADV,EAEGC,IAFH,CAEQ,OAFR,EAEiBR,KAFjB,EAGGQ,IAHH,CAGQ,QAHR,EAGkBP,MAHlB,EAIGQ,KAJH,CAIS,QAJT,EAImB,gBAJnB,CAAlB;;AAMF,WAAKC,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGhB,KAAK,CAACiB,MAAtB,EAA8BD,CAAC,EAA/B,EAAmC;AACjCP,QAAAA,SAAS,CAACC,MAAV,CAAiB,MAAjB,EACWR,IADX,CACgBF,KAAK,CAACgB,CAAD,CAAL,CAASE,IADzB,EAC+BC,KAD/B,GAEWN,MAFX,CAEkB,MAFlB,EAGWC,IAHX,CAGgB,OAHhB,EAGyB,CAHzB,EAIWA,IAJX,CAIgB,QAJhB,EAI2BM,SAAD,IAAeA,SAAS,GAAGZ,KAJrD,EAKWM,IALX,CAKgB,MALhB,EAKwB,SALxB,EAMWA,IANX,CAMgB,GANhB,EAMqB,CAACM,SAAD,EAAYC,SAAZ,KAA0BA,SAAS,GAAG,EAN3D,EAOWP,IAPX,CAOgB,GAPhB,EAOsBM,SAAD,IAAeb,MAAM,GAAGa,SAAS,GAAGZ,KAPzD;AASAC,QAAAA,SAAS,CAACC,MAAV,CAAiB,MAAjB,EACWR,IADX,CACgBF,KAAK,CAACgB,CAAD,CAAL,CAASM,IADzB,EAC+BH,KAD/B,GAEeN,MAFf,CAEsB,MAFtB,EAGeC,IAHf,CAGoB,GAHpB,EAGyB,CAACS,SAAD,EAAYP,CAAZ,KAAkBA,CAAC,GAAG,EAAJ,GAAS,EAHpD,EAIeF,IAJf,CAIoB,GAJpB,EAIyB,CAACS,SAAD,EAAYP,CAAZ,KAAkBT,MAAM,GAAGgB,SAAS,GAAGf,KAArB,GAA6B,EAJxE,EAKegB,IALf,CAKoBD,SAAS,IAAIA,SALjC;AAMC;AACF,KAvC4B;AAAA;;AAyC7BE,EAAAA,MAAM,GAAG;AAEP,wBACA;AAAK,MAAA,GAAG,EAAC,QAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA;AAGD;;AA9C4B;;AAkDjC,eAAe3B,QAAf","sourcesContent":["import React, { Component } from 'react';\nimport * as d3 from 'd3';\n\nconst w = 1283;\nconst h = 404;\n\nclass BarGraph extends Component {\n\n    componentDidMount = () => {\n      let nodes = this.props.data.nodes;\n      console.log(nodes);\n      const data = [ 2, 4, 2, 6, 8 ];\n      this.drawBarChart(data, nodes)\n    }\n\n    drawBarChart = (data, nodes)  => {\n\n      //const width = document.getElementById(\"force\").innerWidth;\n      //const height = document.getElementById(\"force\").innerHeight;\n      const width = w;\n      const height = h;\n      const scale = 5;\n      const svgCanvas = d3.select(this.refs.canvas)\n                          .append('svg')\n                          .attr('width', width)\n                          .attr('height', height)\n                          .style('border', '1px solid #aaa');\n\n    for (i = 0; i < nodes.length; i++) { \n      svgCanvas.select('rect')\n                .data(nodes[i].pubs).enter()\n                .append('rect')\n                .attr('width', 5)\n                .attr('height', (datapoint) => datapoint * scale)\n                .attr('fill', '#0099ff')\n                .attr('x', (datapoint, iteration) => iteration * 45)\n                .attr('y', (datapoint) => height - datapoint * scale);\n\n      svgCanvas.select('text')\n                .data(nodes[i].name).enter()\n                    .append('text')\n                    .attr('x', (dataPoint, i) => i * 45 + 10)\n                    .attr('y', (dataPoint, i) => height - dataPoint * scale - 10)\n                    .text(dataPoint => dataPoint);\n      }\n    }\n\n    render() { \n      \n      return (\n      <div ref=\"canvas\"></div> \n      )\n    };\n\n}\n\nexport default BarGraph;\n"]},"metadata":{},"sourceType":"module"}