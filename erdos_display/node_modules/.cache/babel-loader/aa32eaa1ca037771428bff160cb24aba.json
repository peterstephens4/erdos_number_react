{"ast":null,"code":"var _jsxFileName = \"/Users/peterstephens/Documents/projects/erdos_number/erdos_display/src/components/BarGraph.js\";\nimport React, { Component } from 'react';\nimport * as d3 from 'd3';\nconst w = 1283;\nconst h = 404;\n\nclass BarGraph extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.componentDidMount = () => {\n      let nodes = this.props.data.nodes; //console.log(nodes);\n\n      const data = [2, 4, 2, 6, 8];\n      this.drawBarChart(data, nodes);\n    };\n\n    this.drawBarChart = (data, nodes) => {\n      //const width = document.getElementById(\"force\").innerWidth;\n      //const height = document.getElementById(\"force\").innerHeight;\n      const width = w;\n      const height = h;\n      const scale = 5;\n      const svgCanvas = d3.select(this.refs.canvas).append('svg').attr('width', width).attr('height', height).style('border', '1px solid #aaa'); //d3.json(nodes, function(error, data) {\n      //if (error) throw error;\n      //console.log(data);\n      //});\n\n      svgCanvas.selectAll('rect').data(data).enter().append('rect').attr('width', 5).attr('height', datapoint => datapoint * scale).attr('fill', '#0099ff').attr('x', (datapoint, iteration) => iteration * 45).attr('y', datapoint => height - datapoint * scale);\n      svgCanvas.selectAll('text').data(data).enter().append('text').attr('x', (dataPoint, i) => i * 45 + 10).attr('y', (dataPoint, i) => height - dataPoint * scale - 10).text(dataPoint => dataPoint); //});                \n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      ref: \"canvas\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 7\n      }\n    });\n  }\n\n}\n\nexport default BarGraph;","map":{"version":3,"sources":["/Users/peterstephens/Documents/projects/erdos_number/erdos_display/src/components/BarGraph.js"],"names":["React","Component","d3","w","h","BarGraph","componentDidMount","nodes","props","data","drawBarChart","width","height","scale","svgCanvas","select","refs","canvas","append","attr","style","selectAll","enter","datapoint","iteration","dataPoint","i","text","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AAEA,MAAMC,CAAC,GAAG,IAAV;AACA,MAAMC,CAAC,GAAG,GAAV;;AAEA,MAAMC,QAAN,SAAuBJ,SAAvB,CAAiC;AAAA;AAAA;;AAAA,SAE7BK,iBAF6B,GAET,MAAM;AACxB,UAAIC,KAAK,GAAG,KAAKC,KAAL,CAAWC,IAAX,CAAgBF,KAA5B,CADwB,CAExB;;AACA,YAAME,IAAI,GAAG,CAAE,CAAF,EAAK,CAAL,EAAQ,CAAR,EAAW,CAAX,EAAc,CAAd,CAAb;AACA,WAAKC,YAAL,CAAkBD,IAAlB,EAAwBF,KAAxB;AACD,KAP4B;;AAAA,SAS7BG,YAT6B,GASd,CAACD,IAAD,EAAOF,KAAP,KAAkB;AAE/B;AACA;AACA,YAAMI,KAAK,GAAGR,CAAd;AACA,YAAMS,MAAM,GAAGR,CAAf;AACA,YAAMS,KAAK,GAAG,CAAd;AACA,YAAMC,SAAS,GAAGZ,EAAE,CAACa,MAAH,CAAU,KAAKC,IAAL,CAAUC,MAApB,EACGC,MADH,CACU,KADV,EAEGC,IAFH,CAEQ,OAFR,EAEiBR,KAFjB,EAGGQ,IAHH,CAGQ,QAHR,EAGkBP,MAHlB,EAIGQ,KAJH,CAIS,QAJT,EAImB,gBAJnB,CAAlB,CAP+B,CAa/B;AACE;AACA;AACF;;AAEEN,MAAAA,SAAS,CAACO,SAAV,CAAoB,MAApB,EACWZ,IADX,CACgBA,IADhB,EACsBa,KADtB,GAEWJ,MAFX,CAEkB,MAFlB,EAGWC,IAHX,CAGgB,OAHhB,EAGyB,CAHzB,EAIWA,IAJX,CAIgB,QAJhB,EAI2BI,SAAD,IAAeA,SAAS,GAAGV,KAJrD,EAKWM,IALX,CAKgB,MALhB,EAKwB,SALxB,EAMWA,IANX,CAMgB,GANhB,EAMqB,CAACI,SAAD,EAAYC,SAAZ,KAA0BA,SAAS,GAAG,EAN3D,EAOWL,IAPX,CAOgB,GAPhB,EAOsBI,SAAD,IAAeX,MAAM,GAAGW,SAAS,GAAGV,KAPzD;AASAC,MAAAA,SAAS,CAACO,SAAV,CAAoB,MAApB,EACWZ,IADX,CACgBA,IADhB,EACsBa,KADtB,GAEeJ,MAFf,CAEsB,MAFtB,EAGeC,IAHf,CAGoB,GAHpB,EAGyB,CAACM,SAAD,EAAYC,CAAZ,KAAkBA,CAAC,GAAG,EAAJ,GAAS,EAHpD,EAIeP,IAJf,CAIoB,GAJpB,EAIyB,CAACM,SAAD,EAAYC,CAAZ,KAAkBd,MAAM,GAAGa,SAAS,GAAGZ,KAArB,GAA6B,EAJxE,EAKec,IALf,CAKoBF,SAAS,IAAIA,SALjC,EA3B6B,CAkC/B;AACD,KA5C4B;AAAA;;AA8C7BG,EAAAA,MAAM,GAAG;AAEP,wBACA;AAAK,MAAA,GAAG,EAAC,QAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA;AAGD;;AAnD4B;;AAuDjC,eAAevB,QAAf","sourcesContent":["import React, { Component } from 'react';\nimport * as d3 from 'd3';\n\nconst w = 1283;\nconst h = 404;\n\nclass BarGraph extends Component {\n\n    componentDidMount = () => {\n      let nodes = this.props.data.nodes;\n      //console.log(nodes);\n      const data = [ 2, 4, 2, 6, 8 ];\n      this.drawBarChart(data, nodes)\n    }\n\n    drawBarChart = (data, nodes)  => {\n\n      //const width = document.getElementById(\"force\").innerWidth;\n      //const height = document.getElementById(\"force\").innerHeight;\n      const width = w;\n      const height = h;\n      const scale = 5;\n      const svgCanvas = d3.select(this.refs.canvas)\n                          .append('svg')\n                          .attr('width', width)\n                          .attr('height', height)\n                          .style('border', '1px solid #aaa');\n\n      //d3.json(nodes, function(error, data) {\n        //if (error) throw error;\n        //console.log(data);\n      //});\n\n        svgCanvas.selectAll('rect')\n                  .data(data).enter()\n                  .append('rect')\n                  .attr('width', 5)\n                  .attr('height', (datapoint) => datapoint * scale)\n                  .attr('fill', '#0099ff')\n                  .attr('x', (datapoint, iteration) => iteration * 45)\n                  .attr('y', (datapoint) => height - datapoint * scale);\n\n        svgCanvas.selectAll('text')\n                  .data(data).enter()\n                      .append('text')\n                      .attr('x', (dataPoint, i) => i * 45 + 10)\n                      .attr('y', (dataPoint, i) => height - dataPoint * scale - 10)\n                      .text(dataPoint => dataPoint);\n\n      //});                \n    }\n\n    render() { \n      \n      return (\n      <div ref=\"canvas\"></div> \n      )\n    };\n\n}\n\nexport default BarGraph;\n"]},"metadata":{},"sourceType":"module"}