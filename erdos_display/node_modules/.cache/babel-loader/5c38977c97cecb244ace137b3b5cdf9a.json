{"ast":null,"code":"import * as d3 from \"d3\";\nexport function runForceGraph(container, linksData, nodesData, author) {\n  //console.log(author)\n  //console.log(nodesData);\n  //console.log(linksData);\n  let links = []; //const links = linksData.map((d) => Object.assign({}, d));\n\n  if (linksData) {\n    links = linksData.map(d => Object.assign({}, d));\n  }\n\n  let nodes = []; //const nodes = nodesData.map((d) => Object.assign({}, d));\n\n  if (nodesData) {\n    nodes = nodesData.map(d => Object.assign({}, d));\n  }\n\n  const containerRect = container.getBoundingClientRect();\n  const height = containerRect.height;\n  const width = containerRect.width;\n\n  const drag = simulation => {\n    const dragstarted = d => {\n      if (!d3.event.active) simulation.alphaTarget(0.3).restart();\n      d.fx = d.x;\n      d.fy = d.y;\n    };\n\n    const dragged = d => {\n      d.fx = d3.event.x;\n      d.fy = d3.event.y;\n    };\n\n    const dragended = d => {\n      if (!d3.event.active) simulation.alphaTarget(0);\n      d.fx = null;\n      d.fy = null;\n    };\n\n    return d3.drag().on(\"start\", dragstarted).on(\"drag\", dragged).on(\"end\", dragended);\n  };\n\n  const getNodeColor = node => {\n    return node.name === author ? 'red' : '#0099ff';\n  };\n\n  const simulation = d3.forceSimulation(nodes).force(\"link\", d3.forceLink(links).id(d => d.id)).force(\"charge\", d3.forceManyBody().strength(-150)).force(\"x\", d3.forceX()).force(\"y\", d3.forceY());\n  const svg = d3.select(container).append(\"svg\").attr(\"viewBox\", [-width / 2, -height / 2, width, height]).call(d3.zoom().on(\"zoom\", function () {\n    svg.attr(\"transform\", d3.event.transform);\n  }));\n  const link = svg.append(\"g\").attr(\"stroke\", \"#aaa\").attr(\"stroke-opacity\", 0.6).selectAll(\"line\").data(links).join(\"line\").attr(\"stroke-width\", function (d) {\n    return Math.sqrt(d.value) / 10;\n  });\n  const node = svg.append(\"g\").attr(\"stroke\", \"#aaa\").attr(\"stroke-width\", 2).selectAll(\"circle\").data(nodes).join(\"circle\").attr(\"r\", function (d) {\n    return Math.sqrt(d.pubs) * 1.5;\n  }).attr(\"fill\", getNodeColor).call(drag(simulation));\n  node.append(\"title\").text(function (d) {\n    let dc = '';\n    let name = ';';\n\n    if (d.name.indexOf('*') !== -1) {\n      name = d.name.replace('*', '');\n      dc = ' (DECEASED)';\n    } else {\n      name = d.name;\n    }\n\n    name = name.concat(dc);\n    let text = name.concat(\"\\n \");\n    text = text.concat(d.pubs);\n    text = text.concat(\" Coauthor(s) with Erdos number 2\");\n    return text;\n  });\n  simulation.on(\"tick\", () => {\n    //update link positions\n    link.attr(\"x1\", d => d.source.x).attr(\"y1\", d => d.source.y).attr(\"x2\", d => d.target.x).attr(\"y2\", d => d.target.y); // update node positions\n\n    node.attr(\"cx\", d => d.x).attr(\"cy\", d => d.y);\n  });\n  return {\n    destroy: () => {\n      simulation.stop();\n      simulation.remove();\n    },\n    nodes: () => {\n      return svg.node();\n    }\n  };\n}","map":{"version":3,"sources":["/Users/peterstephens/Documents/projects/erdos_number/erdos_display/src/components/ForceGraphGenerator.js"],"names":["d3","runForceGraph","container","linksData","nodesData","author","links","map","d","Object","assign","nodes","containerRect","getBoundingClientRect","height","width","drag","simulation","dragstarted","event","active","alphaTarget","restart","fx","x","fy","y","dragged","dragended","on","getNodeColor","node","name","forceSimulation","force","forceLink","id","forceManyBody","strength","forceX","forceY","svg","select","append","attr","call","zoom","transform","link","selectAll","data","join","Math","sqrt","value","pubs","text","dc","indexOf","replace","concat","source","target","destroy","stop","remove"],"mappings":"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","sourcesContent":["import * as d3 from \"d3\";\n\nexport function runForceGraph(container, linksData, nodesData, author) {\n//console.log(author)\n//console.log(nodesData);\n//console.log(linksData);\n\n    let links = [];\n    //const links = linksData.map((d) => Object.assign({}, d));\n    if(linksData){\n        links = linksData.map((d) => Object.assign({}, d));\n    }\n    \n    let nodes = [];\n    //const nodes = nodesData.map((d) => Object.assign({}, d));\n    if(nodesData) {\n        nodes = nodesData.map((d) => Object.assign({}, d));\n    }\n\n    const containerRect = container.getBoundingClientRect();\n    const height = containerRect.height;\n    const width = containerRect.width;\n\n    const drag = (simulation) => {\n    const dragstarted = (d) => {\n        if (!d3.event.active) simulation.alphaTarget(0.3).restart();\n        d.fx = d.x;\n        d.fy = d.y;\n    };\n\n    const dragged = (d) => {\n        d.fx = d3.event.x;\n        d.fy = d3.event.y;\n    };\n\n    const dragended = (d) => {\n        if (!d3.event.active) simulation.alphaTarget(0);\n        d.fx = null;\n        d.fy = null;\n    };\n\n    return d3.drag()\n            .on(\"start\", dragstarted)\n            .on(\"drag\", dragged)\n            .on(\"end\", dragended);\n    };\n\n    const getNodeColor = (node) => {\n        return node.name === author ? 'red' : '#0099ff'\n    }\n\n    const simulation = d3.forceSimulation(nodes)\n                         .force(\"link\", d3.forceLink(links).id(d => d.id))\n                         .force(\"charge\", d3.forceManyBody().strength(-150))\n                         .force(\"x\", d3.forceX())\n                         .force(\"y\", d3.forceY());\n\n    const svg = d3.select(container)\n                  .append(\"svg\")\n                  .attr(\"viewBox\", [-width / 2, -height / 2, width, height])\n                  .call(d3.zoom().on(\"zoom\", function () {\n                        svg.attr(\"transform\", d3.event.transform);})\n                  );\n\n    const link = svg.append(\"g\")\n                    .attr(\"stroke\", \"#aaa\")\n                    .attr(\"stroke-opacity\", 0.6)\n                    .selectAll(\"line\")\n                    .data(links)\n                    .join(\"line\")\n                    .attr(\"stroke-width\", function(d) { return Math.sqrt(d.value) / 10; });\n\n    const node = svg.append(\"g\")\n                    .attr(\"stroke\", \"#aaa\")\n                    .attr(\"stroke-width\", 2)\n                    .selectAll(\"circle\")\n                    .data(nodes)\n                    .join(\"circle\")\n                    .attr(\"r\", function(d) {\n                        return Math.sqrt(d.pubs)*1.5;\n                    })\n                    .attr(\"fill\", getNodeColor)\n                    .call(drag(simulation));\n\n    node.append(\"title\")\n        .text(function(d) {\n            let dc = '';\n            let name = ';'\n            if (d.name.indexOf('*') !== -1) {\n                name = d.name.replace('*', '');\n                dc = ' (DECEASED)';\n            }\n            else {\n                name = d.name;\n            }\n            name = name.concat(dc);\n            let text = name.concat(\"\\n \");\n            text = text.concat(d.pubs);\n            text = text.concat(\" Coauthor(s) with Erdos number 2\");\n            return text;\n    });\n\n    simulation.on(\"tick\", () => {\n        //update link positions\n        link.attr(\"x1\", d => d.source.x)\n            .attr(\"y1\", d => d.source.y)\n            .attr(\"x2\", d => d.target.x)\n            .attr(\"y2\", d => d.target.y);\n\n        // update node positions\n        node.attr(\"cx\", d => d.x)\n            .attr(\"cy\", d => d.y);\n    });\n\n    return {\n        destroy: () => {\n            simulation.stop();\n            simulation.remove();\n        },\n        nodes: () => {\n            return svg.node();\n        }\n    };\n}\n\n"]},"metadata":{},"sourceType":"module"}